class kindsByName
  table
end class

class JSONforeign
  % just methods
end class

class Constants
  % just methods
end class

situation building

when building kind
  method make-hash-table-of-kinds-from-JSON
  script make-kind
  load-file (Filename)
  make-input-pins (partJSON)
  make-output-pins (partJSON)
  make-type-name (name) >> kindName
end when

when building JSONforeign
  method getKind >> name
  method getFilename >> filename
  method getInPins >> map Pin
  method getOutPins >> map Pin
  method schematicName >> name
  method getPartsList >> :map name
end when

when building Symbol  % can be implemented as Strings for now (later we might optimize)
  method symbolSchematic
end when

script kind make-kind
  make-hash-table-of-kinds-from-JSON
  set-code-stack-empty
  let arr = get-schematic-as-JSON
    map partJSON = arr in
      if part.isLeaf then
        make-leaf-kind (partJSON)
      else
        if part.isSchematic then
          make-schematic-kind (partJSON)
	else
	  fatalErrorInMakeKind
	end if
      end if
    end map
  end let  
end script

script kind make-leaf-kind (partJSON)
  let kindString = partJSON.getKind in
    let filename = partJSON.getFilename in
    create newKind = kind in
      newKind.kind-name = make-type-name (kindString)
      newKind.self-class = make-type-name (kindString)
      load-file (filename)  % skip this until very basics are working
      @newKind.make-input-pins (partJSON)
      @newKind.make-output-pins (partJSON)
      table.setKeyValue (kindString, newKind)
      >> newKind
    end create
    end let
  end let
end script

script kind make-schematic-kind (partJSON)
  let schematicJSON = partJSON.getSchematic
    let schematicName = partJSON.getSchematicName
      let newKind = create kind in
        newKind.kind-name = partJSON.schematicName
	newKind.self-class = symbolSchematic
	@newKind.make-input-pins (partJSON)
	@newKind.make-output-pins (partJSON)
        table.setKeyValue (kindString, newKind)
	map child = partJSON.getPartsList in
	  newKind.addPart (child
	end map
        >> newKind
      end create
      end let
    end let
  end let
end script


script kind make-input-pins (partJSON)
  map inpin-name = partJSON.getInPins in
    self.add-input-pin (inpin-name)
  end map
end script

script kind make-output-pins (partJSON)
  map outpin-name = partJSON.getOutPins in
    self.add-output-pin (outpin-name)
  end map
end script
